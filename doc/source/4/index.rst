============================================
四.Javascript书写规范
============================================
------------------
1，	命名规范.
------------------
::

	常量名
		全部大写并单词间用下划线分隔
		如：CSS_BTN_CLOSE、TXT_LOADING

	对象的属性或方法名
		小驼峰式（little camel-case）
		如：init、bindEvent、updatePosition
		示例：Dialog.prototype = {
					init: function () {},
					bindEvent: function () {},
					updatePosition: function () {}
					…
					};
	类名（构造器）
		-->小驼峰式但首字母大写
		-->如：Current、DefaultConfig
	函数名
		-->小驼峰式
		-->如：current()、defaultConfig()
	变量名
		-->小驼峰式，原生js变量要求是纯英文字母，首字母须小写
	-->如：current、defaultConfig
	要求变量名集中声明，避免全局变量
	私有变量名
		-->小驼峰式但需要用_开头
		-->如：_current、_defaultConfig
		
------------------------		
2，避免额外的逗号.
------------------------

::

	var arr = [1,2,3,];//末尾多写了个逗号
	
	var arr = {1,2,3,};//末尾多写了一个逗号

	
-------------------------------
3，使用严格的条件判断符.
-------------------------------

::

	用===代替==，用！==代替！=，避免掉入==造成的陷阱，在条件判断时，这样的一些值表示为false。
	
	null
	
	undefined与null相等
	
	字符串''
	
	数字0
	
	NaN
	
	
“===”表示类型和值完全一样；

“==”表示值一样，类型可不一样；

::

	(function () {
		var undefined;
		undefined == null; // true
		1 == true; //true
		2 == true; // false
		0 == false; // true
		0 == ''; // true
		NaN == NaN;// false
		[] == false; // true
		[] == ![]; // true
	})();
	
	

对于不同类型的==判断，有这样一些规则，顺序自上而下::

	undefined与null相等
	
	一个是number一个是string时，会尝试将string转换为number
	
	尝试将boolean转换为number
	
	0或1
	
	尝试将Object转换成number或string
	
------------------------------------------	
4，下面类型的对象不建议用new构造.
------------------------------------------

::

	new Number
	
	new String
	
	new Boolean
	
	new Object //用{}代替
	
	new Array //用[]代替
	
	引用对象成员用obj.name代替obj[“name”]，除非属性名是变量。

---------------------------------	
5，从number到string的转换.
---------------------------------

::

	/** 推荐写法*/
		var a = 1;
		
		typeof(a); //"number"
		
		console.log(a); //1
		
		var aa=a+'';
		
		typeof(aa); //"string"
		
		console.log(aa); //'1'
		
	/** 不推荐写法*/
	
		new String(a)或a.toString()

-----------------------------------------------------------------------------		
6，从string到number的转换，使用parseInt，必须显示指定第二个参数的进制.
-----------------------------------------------------------------------------

::

	/** 推荐写法*/
	var a = '1';
	var aa = parseInt(a,10);
	typeof(a); //"string"
	console.log(a); //'1'
	typeof(aa); //"number"
	console.log(aa); //1,
	
----------------------------------
7，从float到integer的转换.
----------------------------------


::

	/** 推荐写法*/
	
	Math.floor/Math.round/Math.ceil
	
	/*不推荐写法*/
	
	parseInt
	
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
8，字符串拼接应使用数组保存字符串片段，使用时调用join方法。避免使用+或者+=的方式拼接较长的字符串，每个字符串都会使用一个小的内存片段，过多的内存片段会影响性能.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

::

	/**推荐的拼接方式array的push、join*/
	
		var str=[],
		
			list=['测试A','测试B'];
			
		for (var i=0 , len=list.length; i < len; i++) {
		
			str.push( '<div>'+ list[i] + '</div>');
		};
		
		console.log(str.join('')); //<div>测试A</div><div>测试B</div>
	
	/** 不推荐的拼接方式+=*/
		var str = '',
			list=['测试A','测试B'];
		for (var i = 0, len = list.length; i< len; i++) {
			str+='<div>' + list[i] + '</div>';
		};
		console.log(str); //<div>测试A</div><div>测试B</div>
		
----------------------------------------------------------------------------------------------		
9，尽量避免使用存在兼容性及消耗资源的方法和属性，注重HTML分离，减少reflow，注重性能.
----------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------
10，全局命名空间污染与IIFE（Immediately-Invoked Function Expression）.
-----------------------------------------------------------------------------

总是将 代码包裹成一个IIFE，用以创建独立隔绝的定义域，这一举措可防止全局命名空间被污染。IIFE还可确保你的代码不会轻易被其它全局命名空间里的代码所修改（第三方库，window引用，被覆盖的未定义的关键字等等）

--------------------
11，严格模式.
--------------------

ECMAScript5严格模式可在整个脚本或独个方法内被激活，它对应不同的javascript语境会做更加严格的错误检查。严格模式也确保了javascript代码更加的健壮，运行的也更加快速。严格模式会阻止使用在未来很可能被引入的预留关键字。

eg：在angularjs中单个独立的controller中使用严格模式::

		‘use strict’;
		
		Module.exports=sjcjController;
		
		sjcjController.$inject=[‘$scope’];
		
		function sjcjController($scope){
		
		/*js逻辑书写区域*/
		
		}



